// <auto-generated />
using System;
using BuildServer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BuildServer.Migrations
{
    [DbContext(typeof(BuildServerContext))]
    [Migration("20251014062210_CleanupAgentConfigAndAddJobAutoAssign")]
    partial class CleanupAgentConfigAndAddJobAutoAssign
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.25");

            modelBuilder.Entity("BuildServer.Models.Agent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AgentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("AverageBuildDurationSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentJobId")
                        .HasColumnType("TEXT");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LastBuildDurationSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastHeartbeat")
                        .HasColumnType("TEXT");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalBuildsCompleted")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AgentId")
                        .IsUnique();

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("BuildServer.Models.AgentConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AgentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BuildOutputFolder")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AgentId")
                        .IsUnique();

                    b.ToTable("AgentConfigurations");
                });

            modelBuilder.Entity("BuildServer.Models.GlobalSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DefaultBranch")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GitHubToken")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GoogleDriveCredentialsJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GoogleDriveFolderId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PortalServerSecret")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PortalServerUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RepositoryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RepositoryOwner")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RepositoryUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("GlobalSettings");
                });

            modelBuilder.Entity("BuildServer.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AppVersion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AssignedAgentId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AutoAssign")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BuildType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("BundleCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("GitBranch")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GitCommitAuthor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("GitCommitDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("GitCommitHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GitCommitMessage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("JobId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("Progress")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UploadToChannel")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UploadToGoogleDrive")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("JobId")
                        .IsUnique();

                    b.ToTable("Jobs");
                });
#pragma warning restore 612, 618
        }
    }
}
