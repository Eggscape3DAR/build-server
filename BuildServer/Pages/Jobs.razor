@page "/jobs"
@using Microsoft.EntityFrameworkCore
@using BuildServer.Data
@using BuildServer.Models
@using System.Net.Http
@using System.Net.Http.Json
@inject BuildServerContext DB
@inject HttpClient Http
@inject IConfiguration Config

<PageTitle>Jobs - Eggscape Build Server</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-3">
    <div>
        <h1>üì¶ Build Jobs</h1>
        <p class="text-muted">üê£ Queue and hatch your Eggscape builds üê£</p>
    </div>
    <button class="btn btn-primary btn-lg" @onclick="ShowCreateModal">
        QUEUE JOB
    </button>
</div>

<div class="row">
    <div class="col-md-4">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Queued</h5>
                <h2>@_jobs.Count(j => j.Status == JobStatus.Queued)</h2>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Running</h5>
                <h2>@_jobs.Count(j => j.Status == JobStatus.Running)</h2>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Completed</h5>
                <h2>@_jobs.Count(j => j.Status == JobStatus.Completed)</h2>
            </div>
        </div>
    </div>
</div>

<div class="row mt-4">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">All Jobs</h5>

                @if (_jobs.Any())
                {
                    <table class="table table-hover table-sm">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Agent PC</th>
                                <th>Build Type</th>
                                <th>Branch</th>
                                <th>Commit</th>
                                <th>Submitted</th>
                                <th>Platform</th>
                                <th>Status</th>
                                <th>Progress</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var job in _jobs)
                            {
                                <tr>
                                    <td><strong>@job.Name</strong></td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(job.AssignedAgentId))
                                        {
                                            var agent = _agents.FirstOrDefault(a => a.AgentId == job.AssignedAgentId);
                                            if (agent != null)
                                            {
                                                <small>@agent.MachineName</small>
                                            }
                                            else
                                            {
                                                <small class="text-muted">Unknown</small>
                                            }
                                        }
                                        else
                                        {
                                            <small class="text-muted">-</small>
                                        }
                                    </td>
                                    <td><span class="badge bg-info">@job.BuildType</span></td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(job.GitBranch))
                                        {
                                            <span class="badge bg-secondary">@job.GitBranch</span>
                                        }
                                    </td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(job.GitCommitHash))
                                        {
                                            <code title="@job.GitCommitMessage">@job.GitCommitHash.Substring(0, Math.Min(7, job.GitCommitHash.Length))</code>
                                        }
                                    </td>
                                    <td>
                                        <small>@job.CreatedAt.ToString("g")</small>
                                    </td>
                                    <td><small>@job.Platform</small></td>
                                    <td>
                                        @switch (job.Status)
                                        {
                                            case JobStatus.Queued:
                                                <span class="badge bg-secondary">‚è≥ Queued</span>
                                                break;
                                            case JobStatus.Assigned:
                                                <span class="badge bg-info">üìã Assigned</span>
                                                break;
                                            case JobStatus.Running:
                                                <span class="badge bg-primary">‚ñ∂Ô∏è Running</span>
                                                break;
                                            case JobStatus.Completed:
                                                <span class="badge bg-success">‚úÖ Done</span>
                                                break;
                                            case JobStatus.Failed:
                                                <span class="badge bg-danger">‚ùå Failed</span>
                                                break;
                                            case JobStatus.Cancelled:
                                                <span class="badge bg-warning">üö´ Cancelled</span>
                                                break;
                                        }
                                    </td>
                                    <td style="width: 120px;">
                                        @if (job.Status == JobStatus.Running)
                                        {
                                            <div class="progress" style="height: 20px;">
                                                <div class="progress-bar" style="width: @((job.Progress * 100).ToString("F0"))%">
                                                    @((job.Progress * 100).ToString("F0"))%
                                                </div>
                                            </div>
                                        }
                                    </td>
                                    <td>
                                        <button class="btn btn-sm btn-info" @onclick="() => ShowJobDetails(job)">
                                            Details
                                        </button>
                                        @if (job.Status == JobStatus.Queued)
                                        {
                                            <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteJob(job.JobId)">
                                                Delete
                                            </button>
                                        }
                                        @if (job.Status == JobStatus.Running || job.Status == JobStatus.Assigned)
                                        {
                                            <button class="btn btn-sm btn-warning" @onclick="() => CancelJob(job.JobId)">
                                                Cancel
                                            </button>
                                        }
                                        @if (job.Status == JobStatus.Failed || job.Status == JobStatus.Cancelled)
                                        {
                                            <button class="btn btn-sm btn-success" @onclick="() => RestartJob(job.JobId)">
                                                Restart
                                            </button>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <div class="alert alert-info">
                        <strong>No jobs yet.</strong>
                        <p>Create your first build job using the button above.</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@if (_showCreateModal)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create New Build Job</h5>
                    <button type="button" class="btn-close" @onclick="CloseCreateModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6>Build Configuration</h6>

                            <div class="mb-3">
                                <label class="form-label">Job Name</label>
                                <input type="text" class="form-control" @bind="_newJob.Name"
                                       placeholder="Commit message - Author" />
                                <small class="form-text text-muted">Auto-filled from selected commit</small>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Platform</label>
                                <select class="form-select" @bind="_newJob.Platform">
                                    <option value="Meta">Meta</option>
                                    <option value="Android">Android</option>
                                    <option value="Windows">Windows</option>
                                </select>
                            </div>

                            <hr />
                            <h6>Build Options</h6>

                            <div class="mb-3">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" @bind="_newJob.UploadToGoogleDrive" id="uploadGDrive" />
                                    <label class="form-check-label" for="uploadGDrive">
                                        Upload to Google Drive
                                    </label>
                                </div>
                                <small class="form-text text-muted">
                                    Uploads to folder with commit name and code
                                </small>
                            </div>

                            <div class="mb-3">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" @bind="_newJob.UploadToChannel" id="uploadChannel" />
                                    <label class="form-check-label" for="uploadChannel">
                                        Upload to Channel
                                    </label>
                                </div>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Build Type</label>
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="buildType" id="levelBuilder"
                                           checked="@(_newJob.BuildType == "LevelBuilder")"
                                           @onclick="@(async () => await OnBuildTypeChanged("LevelBuilder"))" />
                                    <label class="form-check-label" for="levelBuilder">
                                        Level Builder
                                    </label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="buildType" id="earlyAccess"
                                           checked="@(_newJob.BuildType == "EarlyAccess")"
                                           @onclick="@(async () => await OnBuildTypeChanged("EarlyAccess"))" />
                                    <label class="form-check-label" for="earlyAccess">
                                        Early Access
                                    </label>
                                </div>
                            </div>

                            @if (_loadingBundleCode)
                            {
                                <div class="alert alert-info">Loading bundle code...</div>
                            }
                            else
                            {
                                <div class="mb-3">
                                    <label class="form-label">Current Bundle Code from Portal Server</label>
                                    <div class="alert alert-secondary">
                                        <strong>Current:</strong> @_currentBundleCode
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Bundle Code for this Build</label>
                                    <div class="input-group">
                                        <input type="number" class="form-control" @bind="_newJob.BundleCode"
                                               readonly="@_autoIncrementBundleCode" />
                                        <div class="input-group-text">
                                            <input class="form-check-input mt-0" type="checkbox" @bind="_autoIncrementBundleCode"
                                                   @onclick="OnAutoIncrementChanged" id="autoIncrement" />
                                            <label class="form-check-label ms-2" for="autoIncrement">
                                                Auto-increment
                                            </label>
                                        </div>
                                    </div>
                                    <small class="form-text text-muted">
                                        @if (_autoIncrementBundleCode)
                                        {
                                            <span>Auto-incremented to @_newJob.BundleCode (Current + 1)</span>
                                        }
                                        else
                                        {
                                            <span>Manually set bundle code</span>
                                        }
                                    </small>
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">App Version</label>
                                    <input type="text" class="form-control" @bind="_newJob.AppVersion" placeholder="1.0.0" />
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Unity Startup Timeout (minutes)</label>
                                    <input type="number" class="form-control" @bind="_newJob.UnityStartupTimeoutMinutes" min="1" max="120" />
                                    <small class="form-text text-muted">
                                        Time to wait for Unity to open and respond. Default: 45 minutes
                                    </small>
                                </div>

                                <hr />
                                <h6>Agent Assignment</h6>

                                <div class="mb-3">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" @bind="_newJob.AutoAssign" id="autoAssign" />
                                        <label class="form-check-label" for="autoAssign">
                                            <strong>Auto-assign to next available agent</strong>
                                        </label>
                                    </div>
                                    <small class="form-text text-muted">
                                        ‚úÖ Recommended: Automatically assigns to the highest priority available agent
                                    </small>
                                </div>

                                @if (!_newJob.AutoAssign)
                                {
                                    <div class="mb-3">
                                        <label class="form-label">Manually Select Agent</label>
                                        <select class="form-select" @bind="_newJob.ManualAgentId">
                                            <option value="">-- No agent assigned (queued) --</option>
                                            @foreach (var agent in _availableAgents)
                                            {
                                                <option value="@agent.AgentId">@agent.Name (@agent.MachineName)</option>
                                            }
                                        </select>
                                        <small class="form-text text-muted">
                                            Leave blank to queue without assignment
                                        </small>
                                    </div>
                                }
                            }
                        </div>

                        <div class="col-md-6">
                            <h6>Git Configuration</h6>

                            <div class="mb-3">
                                <label class="form-label">Branch</label>
                                <div class="input-group">
                                    <select class="form-select" value="@_selectedBranch" @onchange="OnBranchChangedEvent">
                                        <option value="">Select branch...</option>
                                        @foreach (var branch in _branches)
                                        {
                                            <option value="@branch.Name">@branch.Name</option>
                                        }
                                    </select>
                                    <button class="btn btn-outline-secondary" type="button" @onclick="LoadBranches">
                                        üîÑ Refresh
                                    </button>
                                </div>
                                @if (!string.IsNullOrEmpty(_defaultBranch))
                                {
                                    <small class="form-text text-muted">Default: @_defaultBranch</small>
                                }
                            </div>

                            @if (_loadingCommits)
                            {
                                <div class="alert alert-info">Loading commits...</div>
                            }
                            else if (_commits.Any())
                            {
                                <div class="mb-3">
                                    <label class="form-label">Select Commit (ordered by most recent)</label>
                                    <div style="max-height: 300px; overflow-y: auto; border: 1px solid #dee2e6; border-radius: 0.25rem;">
                                        @foreach (var commit in _commits)
                                        {
                                            <div class="p-2 border-bottom @(_selectedCommit == commit.Sha ? "bg-primary bg-opacity-10" : "")"
                                                 style="cursor: pointer;"
                                                 @onclick="() => SelectCommit(commit)">
                                                <div class="d-flex justify-content-between">
                                                    <strong><code>@commit.ShortSha</code></strong>
                                                    <small class="text-muted">@commit.Date.ToString("g")</small>
                                                </div>
                                                <div class="small">@commit.Message</div>
                                                <div class="small text-muted">üë§ @commit.Author</div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                            else if (!string.IsNullOrEmpty(_selectedBranch))
                            {
                                <div class="alert alert-warning">No commits found for this branch</div>
                            }

                            @if (!string.IsNullOrEmpty(_selectedCommit))
                            {
                                <div class="alert alert-success">
                                    <strong>Selected:</strong> @_selectedCommitInfo?.ShortSha
                                    <br />
                                    <small>@_selectedCommitInfo?.Message</small>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseCreateModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="CreateJob" disabled="@(!CanCreateJob())">
                        Create Job
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@if (_showDetailsModal && _selectedJob != null)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Job Details</h5>
                    <button type="button" class="btn-close" @onclick="CloseDetailsModal"></button>
                </div>
                <div class="modal-body">
                    <table class="table">
                        <tr>
                            <th>Job ID</th>
                            <td><code>@_selectedJob.JobId</code></td>
                        </tr>
                        <tr>
                            <th>Name</th>
                            <td>@_selectedJob.Name</td>
                        </tr>
                        <tr>
                            <th>Profile</th>
                            <td>@_selectedJob.ProfileName</td>
                        </tr>
                        <tr>
                            <th>Platform</th>
                            <td>@_selectedJob.Platform</td>
                        </tr>
                        <tr>
                            <th>Channel</th>
                            <td>@_selectedJob.Channel</td>
                        </tr>
                        <tr>
                            <th>Git Branch</th>
                            <td><span class="badge bg-secondary">@_selectedJob.GitBranch</span></td>
                        </tr>
                        <tr>
                            <th>Git Commit</th>
                            <td><code>@_selectedJob.GitCommitHash</code></td>
                        </tr>
                        <tr>
                            <th>Commit Message</th>
                            <td>@_selectedJob.GitCommitMessage</td>
                        </tr>
                        <tr>
                            <th>Commit Author</th>
                            <td>@_selectedJob.GitCommitAuthor</td>
                        </tr>
                        <tr>
                            <th>Commit Date</th>
                            <td>@_selectedJob.GitCommitDate?.ToString("g")</td>
                        </tr>
                        <tr>
                            <th>Status</th>
                            <td>@_selectedJob.Status</td>
                        </tr>
                        <tr>
                            <th>Assigned Agent</th>
                            <td>
                                @if (!string.IsNullOrEmpty(_selectedJob.AssignedAgentId))
                                {
                                    var agent = _agents.FirstOrDefault(a => a.AgentId == _selectedJob.AssignedAgentId);
                                    if (agent != null)
                                    {
                                        <div>
                                            <strong>üñ•Ô∏è @agent.Name</strong>
                                            <br />
                                            <small class="text-muted">Machine: @agent.MachineName</small>
                                            <br />
                                            <small class="text-muted">Status: @(agent.IsOnline ? "üü¢ Online" : "üî¥ Offline")</small>
                                            <br />
                                            <code>@agent.AgentId</code>
                                        </div>
                                    }
                                    else
                                    {
                                        <span class="text-muted">Unknown Agent: <code>@_selectedJob.AssignedAgentId</code></span>
                                    }
                                }
                                else
                                {
                                    <span class="text-muted">Not assigned</span>
                                }
                            </td>
                        </tr>
                        <tr>
                            <th>Created</th>
                            <td>@_selectedJob.CreatedAt.ToString("g")</td>
                        </tr>
                        @if (_selectedJob.StartedAt.HasValue)
                        {
                            <tr>
                                <th>Started</th>
                                <td>@_selectedJob.StartedAt.Value.ToString("g")</td>
                            </tr>
                        }
                        @if (_selectedJob.CompletedAt.HasValue)
                        {
                            <tr>
                                <th>Completed</th>
                                <td>@_selectedJob.CompletedAt.Value.ToString("g")</td>
                            </tr>
                            @if (_selectedJob.StartedAt.HasValue)
                            {
                                <tr>
                                    <th>Duration</th>
                                    <td>@((_selectedJob.CompletedAt.Value - _selectedJob.StartedAt.Value).ToString(@"hh\:mm\:ss"))</td>
                                </tr>
                            }
                        }
                        @if (!string.IsNullOrEmpty(_selectedJob.ErrorMessage))
                        {
                            <tr>
                                <th>Error</th>
                                <td><pre class="bg-danger text-white p-2">@_selectedJob.ErrorMessage</pre></td>
                            </tr>
                        }
                    </table>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDetailsModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Job> _jobs = new();
    private List<Agent> _agents = new();
    private List<Agent> _availableAgents = new();
    private List<BranchDto> _branches = new();
    private List<CommitDto> _commits = new();
    private string _selectedBranch = "";
    private string _selectedCommit = "";
    private CommitDto? _selectedCommitInfo;
    private string _defaultBranch = "development";
    private bool _loadingCommits = false;
    private bool _loadingBundleCode = false;
    private int _currentBundleCode = 0;
    private bool _autoIncrementBundleCode = true;

    private bool _showCreateModal = false;
    private bool _showDetailsModal = false;
    private Job? _selectedJob;
    private CreateJobDto _newJob = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadJobs();
        await LoadDefaultBranch();
    }

    private async Task LoadJobs()
    {
        _jobs = await DB.Jobs.OrderByDescending(j => j.CreatedAt).ToListAsync();
        _agents = await DB.Agents.ToListAsync();
    }

    private async Task LoadDefaultBranch()
    {
        var settings = await DB.GlobalSettings.FirstOrDefaultAsync();
        if (settings != null)
        {
            _defaultBranch = settings.DefaultBranch;
        }
    }

    private async Task ShowCreateModal()
    {
        _newJob = new CreateJobDto { AutoAssign = true };
        _selectedBranch = _defaultBranch;
        _selectedCommit = "";
        _selectedCommitInfo = null;
        _commits.Clear();
        _autoIncrementBundleCode = true;

        // Load available agents
        _availableAgents = await DB.Agents
            .Where(a => a.IsOnline)
            .OrderByDescending(a => a.IsAvailable)
            .ToListAsync();

        _showCreateModal = true;
        await LoadBranches();
        await LoadCurrentBundleCode(); // Load initial bundle code

        if (!string.IsNullOrEmpty(_defaultBranch))
        {
            _selectedBranch = _defaultBranch;
            await OnBranchChanged();
        }
    }

    private void CloseCreateModal()
    {
        _showCreateModal = false;
        _newJob = new CreateJobDto();
        _branches.Clear();
        _commits.Clear();
        _selectedBranch = "";
        _selectedCommit = "";
    }

    private async Task LoadBranches()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<BranchDto>>("/api/git/branches");
            if (response != null)
            {
                _branches = response;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading branches: {ex.Message}");
        }
    }

    private async Task OnBranchChangedEvent(ChangeEventArgs e)
    {
        _selectedBranch = e.Value?.ToString() ?? "";
        await OnBranchChanged();
    }

    private async Task OnBranchChanged()
    {
        _selectedCommit = "";
        _selectedCommitInfo = null;
        _commits.Clear();

        if (string.IsNullOrEmpty(_selectedBranch))
            return;

        _loadingCommits = true;
        try
        {
            var response = await Http.GetFromJsonAsync<List<CommitDto>>($"/api/git/commits?branch={_selectedBranch}&count=20");
            if (response != null)
            {
                _commits = response;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading commits: {ex.Message}");
        }
        finally
        {
            _loadingCommits = false;
        }
    }

    private void SelectCommit(CommitDto commit)
    {
        _selectedCommit = commit.Sha;
        _selectedCommitInfo = commit;

        // Auto-fill job name with commit message and author
        _newJob.Name = $"{commit.Message} - {commit.Author}";
    }

    private async Task OnBuildTypeChanged(string buildType)
    {
        _newJob.BuildType = buildType;
        await LoadCurrentBundleCode();
    }

    private async Task LoadCurrentBundleCode()
    {
        _loadingBundleCode = true;
        try
        {
            var response = await Http.GetFromJsonAsync<BundleCodeResponse>($"/api/version/latest?buildType={_newJob.BuildType}");
            if (response != null)
            {
                _currentBundleCode = response.bundleCode;

                if (_autoIncrementBundleCode)
                {
                    _newJob.BundleCode = _currentBundleCode + 1;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading bundle code: {ex.Message}");
            _currentBundleCode = 0;
            _newJob.BundleCode = 1;
        }
        finally
        {
            _loadingBundleCode = false;
        }
    }

    private void OnAutoIncrementChanged()
    {
        if (_autoIncrementBundleCode)
        {
            _newJob.BundleCode = _currentBundleCode + 1;
        }
    }

    private bool CanCreateJob()
    {
        return !string.IsNullOrEmpty(_newJob.Name) &&
               !string.IsNullOrEmpty(_newJob.Platform) &&
               !string.IsNullOrEmpty(_selectedBranch) &&
               !string.IsNullOrEmpty(_selectedCommit);
    }

    private async Task CreateJob()
    {
        if (!CanCreateJob()) return;

        var job = new Job
        {
            Name = _newJob.Name,
            ProfileName = _newJob.Platform, // Use platform as profile
            Platform = _newJob.Platform,
            Channel = _newJob.BuildType, // Build Type is the channel now
            GitBranch = _selectedBranch,
            GitCommitHash = _selectedCommitInfo?.Sha ?? _selectedCommit,
            GitCommitMessage = _selectedCommitInfo?.Message ?? "",
            GitCommitAuthor = _selectedCommitInfo?.Author ?? "",
            GitCommitDate = _selectedCommitInfo?.Date,
            UploadToGoogleDrive = _newJob.UploadToGoogleDrive,
            UploadToChannel = _newJob.UploadToChannel,
            BuildType = _newJob.BuildType,
            AppVersion = _newJob.AppVersion,
            BundleCode = _newJob.BundleCode,
            UnityStartupTimeoutMinutes = _newJob.UnityStartupTimeoutMinutes,
            AutoAssign = _newJob.AutoAssign,
            AssignedAgentId = _newJob.AutoAssign ? null : _newJob.ManualAgentId,
            Status = JobStatus.Queued,
            Progress = 0,
            CreatedAt = DateTime.UtcNow
        };

        DB.Jobs.Add(job);
        await DB.SaveChangesAsync();

        CloseCreateModal();
        await LoadJobs();
    }

    private void ShowJobDetails(Job job)
    {
        _selectedJob = job;
        _showDetailsModal = true;
    }

    private void CloseDetailsModal()
    {
        _showDetailsModal = false;
        _selectedJob = null;
    }

    private async Task DeleteJob(string jobId)
    {
        var job = await DB.Jobs.FirstOrDefaultAsync(j => j.JobId == jobId);
        if (job != null)
        {
            DB.Jobs.Remove(job);
            await DB.SaveChangesAsync();
            await LoadJobs();
        }
    }

    private async Task CancelJob(string jobId)
    {
        try
        {
            var response = await Http.PostAsync($"/api/jobs/{jobId}/cancel", null);
            if (response.IsSuccessStatusCode)
            {
                await LoadJobs();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error cancelling job: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cancelling job: {ex.Message}");
        }
    }

    private async Task RestartJob(string jobId)
    {
        try
        {
            var response = await Http.PostAsync($"/api/jobs/{jobId}/restart", null);
            if (response.IsSuccessStatusCode)
            {
                await LoadJobs();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error restarting job: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error restarting job: {ex.Message}");
        }
    }

    private class BundleCodeResponse
    {
        public string version { get; set; } = "";
        public int bundleCode { get; set; }
        public string channelId { get; set; } = "";
        public string buildType { get; set; } = "";
    }

    private class CreateJobDto
    {
        public string Name { get; set; } = "";
        public string Platform { get; set; } = "Meta";
        public bool UploadToGoogleDrive { get; set; } = true;
        public bool UploadToChannel { get; set; } = false;
        public string BuildType { get; set; } = "LevelBuilder";
        public string AppVersion { get; set; } = "1.0.0";
        public int BundleCode { get; set; } = 1;
        public int UnityStartupTimeoutMinutes { get; set; } = 45;
        public bool AutoAssign { get; set; } = true;
        public string? ManualAgentId { get; set; }
    }

    private class BranchDto
    {
        public string Name { get; set; } = "";
        public string CommitSha { get; set; } = "";
        public string CommitUrl { get; set; } = "";
    }

    private class CommitDto
    {
        public string Sha { get; set; } = "";
        public string ShortSha { get; set; } = "";
        public string Message { get; set; } = "";
        public string Author { get; set; } = "";
        public string AuthorEmail { get; set; } = "";
        public DateTime Date { get; set; }
        public string Url { get; set; } = "";
    }
}
