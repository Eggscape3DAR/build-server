@page "/settings"
@using Microsoft.EntityFrameworkCore
@using BuildServer.Data
@using BuildServer.Models
@using BuildServer.Services
@inject BuildServerContext DB
@inject GitService GitService

<PageTitle>Settings - Build Server</PageTitle>

<h1>‚öôÔ∏è Settings</h1>

<div class="row mt-4">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">GitHub Configuration</h5>
                <p class="text-muted">Configure GitHub access for fetching branches and commits</p>

                <form>
                    <div class="mb-3">
                        <label class="form-label">Repository URL</label>
                        <input type="text" class="form-control" @bind="_settings.RepositoryUrl"
                               placeholder="https://github.com/Eggscape3DAR/eggscape" />
                        <small class="form-text text-muted">Full GitHub repository URL</small>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Repository Owner</label>
                                <input type="text" class="form-control" @bind="_settings.RepositoryOwner"
                                       placeholder="Eggscape3DAR" />
                                <small class="form-text text-muted">GitHub organization or username</small>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Repository Name</label>
                                <input type="text" class="form-control" @bind="_settings.RepositoryName"
                                       placeholder="eggscape" />
                                <small class="form-text text-muted">Repository name (without owner)</small>
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">GitHub Personal Access Token</label>
                        <input type="password" class="form-control" @bind="_settings.GitHubToken"
                               placeholder="ghp_..." />
                        <small class="form-text text-muted">
                            Required permissions: <code>repo</code> (full control of private repositories)
                            <br />
                            <a href="https://github.com/settings/tokens" target="_blank">Create token here</a>
                        </small>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Default Branch</label>
                        <input type="text" class="form-control" @bind="_settings.DefaultBranch"
                               placeholder="development" />
                        <small class="form-text text-muted">Default branch for new build jobs</small>
                    </div>

                    <div class="d-flex gap-2">
                        <button type="button" class="btn btn-primary" @onclick="SaveSettings">
                            üíæ Save Settings
                        </button>
                        <button type="button" class="btn btn-outline-secondary" @onclick="TestConnection">
                            üîç Test Connection
                        </button>
                    </div>

                    @if (!string.IsNullOrEmpty(_message))
                    {
                        <div class="alert @(_isError ? "alert-danger" : "alert-success") mt-3" role="alert">
                            @_message
                        </div>
                    }
                </form>
            </div>
        </div>
    </div>
</div>

<div class="row mt-4">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">üóÇÔ∏è Google Drive Configuration</h5>
                <p class="text-muted">Configure Google Drive for build artifact storage</p>

                <form>
                    <div class="mb-3">
                        <label class="form-label">Google Drive Folder ID</label>
                        <input type="text" class="form-control" @bind="_settings.GoogleDriveFolderId"
                               placeholder="127SFVubjMJrQfS965hm5Cl3V6h4yfcru" />
                        <small class="form-text text-muted">
                            Folder ID from Google Drive URL: https://drive.google.com/drive/folders/<strong>FOLDER_ID</strong>
                        </small>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Service Account Credentials (JSON)</label>
                        <textarea class="form-control font-monospace" rows="8" @bind="_settings.GoogleDriveCredentialsJson"
                                  placeholder='{"type": "service_account", "project_id": "...", ...}'
                                  style="font-size: 0.85rem;"></textarea>
                        <small class="form-text text-muted">
                            Paste the entire JSON from your Google Cloud Service Account key file.
                            <br />
                            <strong>Setup:</strong> <a href="https://console.cloud.google.com/iam-admin/serviceaccounts" target="_blank">Create Service Account</a>
                            ‚Üí Enable Google Drive API ‚Üí Share Drive folder with service account email
                        </small>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Portal Server URL</label>
                        <input type="text" class="form-control" @bind="_settings.PortalServerUrl"
                               placeholder="https://eggscapeportalserver.onrender.com" />
                        <small class="form-text text-muted">Portal server for upload notifications</small>
                    </div>

                    <div class="d-flex gap-2">
                        <button type="button" class="btn btn-primary" @onclick="SaveSettings">
                            üíæ Save Google Drive Settings
                        </button>
                        <button type="button" class="btn btn-outline-secondary" @onclick="TestDriveConnection">
                            üîç Test Drive Connection
                        </button>
                    </div>

                    @if (!string.IsNullOrEmpty(_driveMessage))
                    {
                        <div class="alert @(_isDriveError ? "alert-danger" : "alert-success") mt-3" role="alert">
                            @_driveMessage
                        </div>
                    }
                </form>
            </div>
        </div>
    </div>
</div>

<div class="row mt-4">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Build Server Information</h5>
                <table class="table">
                    <tbody>
                        <tr>
                            <th>Total Agents</th>
                            <td>@_totalAgents</td>
                        </tr>
                        <tr>
                            <th>Total Jobs</th>
                            <td>@_totalJobs</td>
                        </tr>
                        <tr>
                            <th>Completed Builds</th>
                            <td>@_completedBuilds</td>
                        </tr>
                        <tr>
                            <th>Last Updated</th>
                            <td>@(_settings.UpdatedAt.ToString("g"))</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@code {
    private GlobalSettings _settings = new();
    private string _message = "";
    private bool _isError = false;
    private string _driveMessage = "";
    private bool _isDriveError = false;
    private int _totalAgents = 0;
    private int _totalJobs = 0;
    private int _completedBuilds = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadSettings();
        await LoadStats();
    }

    private async Task LoadSettings()
    {
        var settings = await DB.GlobalSettings.FirstOrDefaultAsync();
        if (settings != null)
        {
            _settings = settings;
        }
        else
        {
            _settings = new GlobalSettings
            {
                RepositoryUrl = "https://github.com/Eggscape3DAR/eggscape",
                RepositoryOwner = "Eggscape3DAR",
                RepositoryName = "eggscape",
                DefaultBranch = "development"
            };
        }
    }

    private async Task LoadStats()
    {
        _totalAgents = await DB.Agents.CountAsync();
        _totalJobs = await DB.Jobs.CountAsync();
        _completedBuilds = await DB.Jobs.CountAsync(j => j.Status == JobStatus.Completed);
    }

    private async Task SaveSettings()
    {
        try
        {
            var existing = await DB.GlobalSettings.FirstOrDefaultAsync();
            if (existing == null)
            {
                DB.GlobalSettings.Add(_settings);
            }
            else
            {
                existing.RepositoryUrl = _settings.RepositoryUrl;
                existing.RepositoryOwner = _settings.RepositoryOwner;
                existing.RepositoryName = _settings.RepositoryName;
                existing.GitHubToken = _settings.GitHubToken;
                existing.DefaultBranch = _settings.DefaultBranch;
                existing.GoogleDriveFolderId = _settings.GoogleDriveFolderId;
                existing.GoogleDriveCredentialsJson = _settings.GoogleDriveCredentialsJson;
                existing.PortalServerUrl = _settings.PortalServerUrl;
                existing.UpdatedAt = DateTime.UtcNow;
            }

            await DB.SaveChangesAsync();

            _message = "Settings saved successfully!";
            _isError = false;
        }
        catch (Exception ex)
        {
            _message = $"Error saving settings: {ex.Message}";
            _isError = true;
        }
    }

    private async Task TestConnection()
    {
        try
        {
            if (string.IsNullOrEmpty(_settings.RepositoryOwner) ||
                string.IsNullOrEmpty(_settings.RepositoryName) ||
                string.IsNullOrEmpty(_settings.GitHubToken))
            {
                _message = "Please fill in all GitHub configuration fields before testing.";
                _isError = true;
                return;
            }

            _message = "Testing connection to GitHub...";
            _isError = false;
            StateHasChanged();

            // Save settings temporarily to test them
            var existing = await DB.GlobalSettings.FirstOrDefaultAsync();
            if (existing == null)
            {
                DB.GlobalSettings.Add(_settings);
            }
            else
            {
                existing.RepositoryUrl = _settings.RepositoryUrl;
                existing.RepositoryOwner = _settings.RepositoryOwner;
                existing.RepositoryName = _settings.RepositoryName;
                existing.GitHubToken = _settings.GitHubToken;
                existing.DefaultBranch = _settings.DefaultBranch;
                existing.UpdatedAt = DateTime.UtcNow;
            }
            await DB.SaveChangesAsync();

            // Test by fetching branches
            var branches = await GitService.GetBranches();

            if (branches.Any())
            {
                _message = $"‚úÖ Connection successful! Found {branches.Count} branches in repository {_settings.RepositoryOwner}/{_settings.RepositoryName}";
                _isError = false;
            }
            else
            {
                _message = "‚ö†Ô∏è Connected successfully but no branches found. Check repository settings.";
                _isError = true;
            }
        }
        catch (Exception ex)
        {
            _message = $"‚ùå Connection test failed: {ex.Message}";
            _isError = true;
        }
    }

    private async Task TestDriveConnection()
    {
        try
        {
            if (string.IsNullOrEmpty(_settings.GoogleDriveFolderId) ||
                string.IsNullOrEmpty(_settings.GoogleDriveCredentialsJson))
            {
                _driveMessage = "Please fill in Google Drive Folder ID and Service Account credentials before testing.";
                _isDriveError = true;
                return;
            }

            _driveMessage = "Testing Google Drive connection...";
            _isDriveError = false;
            StateHasChanged();

            // Basic validation of JSON
            try
            {
                var json = System.Text.Json.JsonDocument.Parse(_settings.GoogleDriveCredentialsJson);
                var type = json.RootElement.GetProperty("type").GetString();
                var clientEmail = json.RootElement.GetProperty("client_email").GetString();

                if (type != "service_account")
                {
                    _driveMessage = "‚ùå Invalid credentials: Must be a service account JSON";
                    _isDriveError = true;
                    return;
                }

                _driveMessage = $"‚úÖ Credentials validated! Service Account: {clientEmail}\n\n" +
                               $"üìÅ Folder ID: {_settings.GoogleDriveFolderId}\n\n" +
                               $"‚ö†Ô∏è Make sure the folder is shared with this service account!\n" +
                               $"Share link: https://drive.google.com/drive/folders/{_settings.GoogleDriveFolderId}";
                _isDriveError = false;

                // Save settings
                await SaveSettings();
            }
            catch (System.Text.Json.JsonException)
            {
                _driveMessage = "‚ùå Invalid JSON format. Please paste the entire service account JSON.";
                _isDriveError = true;
            }
        }
        catch (Exception ex)
        {
            _driveMessage = $"‚ùå Test failed: {ex.Message}";
            _isDriveError = true;
        }
    }
}
