@page "/agents"
@using Microsoft.EntityFrameworkCore
@using BuildServer.Data
@using BuildServer.Models
@inject BuildServerContext DB
@inject NavigationManager Navigation

<PageTitle>Agents - Build Server</PageTitle>

<h1>üñ•Ô∏è Build Agents</h1>

<div class="row mt-4">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Registered Agents</h5>

                @if (_agents.Any())
                {
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Machine</th>
                                <th>IP Address</th>
                                <th>Status</th>
                                <th>Availability</th>
                                <th>Last Heartbeat</th>
                                <th>Current Job</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var agent in _agents)
                            {
                                <tr>
                                    <td><strong>@agent.Name</strong></td>
                                    <td>@agent.MachineName</td>
                                    <td><code>@agent.IpAddress</code></td>
                                    <td>
                                        @if (agent.IsOnline)
                                        {
                                            <span class="badge bg-success">üü¢ Online</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">‚ö´ Offline</span>
                                        }
                                    </td>
                                    <td>
                                        @if (agent.IsAvailable)
                                        {
                                            <span class="badge bg-primary">‚úÖ Available</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-warning">‚è≥ Busy</span>
                                        }
                                    </td>
                                    <td>@agent.LastHeartbeat.ToString("g")</td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(agent.CurrentJobId))
                                        {
                                            <code>@agent.CurrentJobId</code>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td>
                                        <button class="btn btn-sm btn-primary" @onclick="() => ShowConfigModal(agent.AgentId)">
                                            Configure
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <div class="alert alert-info">
                        <strong>No agents registered yet.</strong>
                        <p>Agents will appear here once they register with the server.</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@if (_showConfigModal)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Configure Agent: @_selectedAgentId</h5>
                    <button type="button" class="btn-close" @onclick="CloseConfigModal"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="mb-3">
                            <label class="form-label">Unity Project Path</label>
                            <input type="text" class="form-control" @bind="_config.UnityProjectPath"
                                   placeholder="C:/Projects/Eggscape" />
                            <small class="form-text text-muted">Path to the Unity project directory</small>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Repository URL</label>
                            <input type="text" class="form-control" @bind="_config.RepositoryUrl"
                                   placeholder="https://github.com/YourOrg/YourRepo.git" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Git Username</label>
                            <input type="text" class="form-control" @bind="_config.GitUsername"
                                   placeholder="username" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Git Token / Password</label>
                            <input type="password" class="form-control" @bind="_config.GitToken"
                                   placeholder="ghp_..." />
                            <small class="form-text text-muted">Personal access token or password</small>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Workspace Path</label>
                            <input type="text" class="form-control" @bind="_config.WorkspacePath"
                                   placeholder="C:/BuildWorkspace" />
                            <small class="form-text text-muted">Directory where builds will be executed</small>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Artifacts Path</label>
                            <input type="text" class="form-control" @bind="_config.ArtifactsPath"
                                   placeholder="C:/BuildArtifacts" />
                            <small class="form-text text-muted">Directory where build outputs will be stored</small>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseConfigModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveConfiguration">Save Configuration</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Agent> _agents = new();
    private bool _showConfigModal = false;
    private string? _selectedAgentId;
    private AgentConfigDto _config = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAgents();
    }

    private async Task LoadAgents()
    {
        _agents = await DB.Agents
            .OrderByDescending(a => a.LastHeartbeat)
            .ToListAsync();
    }

    private async Task ShowConfigModal(string agentId)
    {
        _selectedAgentId = agentId;

        // Load existing config if available
        var existingConfig = await DB.AgentConfigurations
            .FirstOrDefaultAsync(c => c.AgentId == agentId);

        if (existingConfig != null)
        {
            _config = new AgentConfigDto
            {
                UnityProjectPath = existingConfig.UnityProjectPath,
                RepositoryUrl = existingConfig.RepositoryUrl,
                GitUsername = existingConfig.GitUsername,
                GitToken = existingConfig.GitToken,
                WorkspacePath = existingConfig.WorkspacePath,
                ArtifactsPath = existingConfig.ArtifactsPath
            };
        }
        else
        {
            _config = new AgentConfigDto();
        }

        _showConfigModal = true;
    }

    private void CloseConfigModal()
    {
        _showConfigModal = false;
        _selectedAgentId = null;
        _config = new AgentConfigDto();
    }

    private async Task SaveConfiguration()
    {
        if (string.IsNullOrEmpty(_selectedAgentId))
            return;

        var config = await DB.AgentConfigurations
            .FirstOrDefaultAsync(c => c.AgentId == _selectedAgentId);

        if (config == null)
        {
            config = new AgentConfiguration
            {
                AgentId = _selectedAgentId
            };
            DB.AgentConfigurations.Add(config);
        }

        config.UnityProjectPath = _config.UnityProjectPath ?? "";
        config.RepositoryUrl = _config.RepositoryUrl ?? "";
        config.GitUsername = _config.GitUsername ?? "";
        config.GitToken = _config.GitToken ?? "";
        config.WorkspacePath = _config.WorkspacePath ?? "";
        config.ArtifactsPath = _config.ArtifactsPath ?? "";
        config.UpdatedAt = DateTime.UtcNow;

        await DB.SaveChangesAsync();

        CloseConfigModal();
        await LoadAgents();
    }

    private class AgentConfigDto
    {
        public string? UnityProjectPath { get; set; }
        public string? RepositoryUrl { get; set; }
        public string? GitUsername { get; set; }
        public string? GitToken { get; set; }
        public string? WorkspacePath { get; set; }
        public string? ArtifactsPath { get; set; }
    }
}
