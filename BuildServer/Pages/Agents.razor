@page "/agents"
@using Microsoft.EntityFrameworkCore
@using BuildServer.Data
@using BuildServer.Models
@inject BuildServerContext DB
@inject NavigationManager Navigation

<PageTitle>Agents - Eggscape Build Server</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-3">
    <div>
        <h1>üñ•Ô∏è Build Agents</h1>
        <p class="text-muted">ü•ö Manage your egg-cellent build machines ü•ö</p>
    </div>
    <button class="btn btn-primary btn-lg" @onclick="@(() => Navigation.NavigateTo("/jobs?create=true"))">
        QUEUE JOB
    </button>
</div>

<div class="row mt-4">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Registered Agents</h5>

                @if (_agents.Any())
                {
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Priority</th>
                                <th>Name</th>
                                <th>Machine</th>
                                <th>Status</th>
                                <th>Availability</th>
                                <th>Last Build</th>
                                <th>Avg (Last 5)</th>
                                <th>Total Builds</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var agent in _agents)
                            {
                                var config = _agentConfigs.FirstOrDefault(c => c.AgentId == agent.AgentId);
                                <tr>
                                    <td>
                                        @if (config != null)
                                        {
                                            <span class="badge bg-info">#@config.Priority</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td><strong>@agent.Name</strong></td>
                                    <td>
                                        <div>@agent.MachineName</div>
                                        <small class="text-muted">@agent.IpAddress</small>
                                    </td>
                                    <td>
                                        @if (agent.IsOnline)
                                        {
                                            <span class="badge bg-success">üü¢ Online</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">‚ö´ Offline</span>
                                        }
                                    </td>
                                    <td>
                                        @if (agent.IsAvailable)
                                        {
                                            <span class="badge bg-primary">‚úÖ Available</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-warning">‚è≥ Busy</span>
                                        }
                                    </td>
                                    <td>
                                        @if (agent.LastBuildDurationSeconds.HasValue)
                                        {
                                            <strong>@FormatDuration(agent.LastBuildDurationSeconds.Value)</strong>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td>
                                        @if (agent.AverageBuildDurationSeconds.HasValue)
                                        {
                                            <span class="text-info">@FormatDuration(agent.AverageBuildDurationSeconds.Value)</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td>
                                        @if (agent.TotalBuildsCompleted > 0)
                                        {
                                            <span class="badge bg-success">@agent.TotalBuildsCompleted</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">0</span>
                                        }
                                    </td>
                                    <td>
                                        <button class="btn btn-sm btn-primary" @onclick="() => ShowConfigModal(agent.AgentId)">
                                            Configure
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <div class="alert alert-info">
                        <strong>No agents registered yet.</strong>
                        <p>Agents will appear here once they register with the server.</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@if (_showConfigModal)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Configure Agent: @_selectedAgentId</h5>
                    <button type="button" class="btn-close" @onclick="CloseConfigModal"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="mb-3">
                            <label class="form-label"><strong>Build Output Folder</strong></label>
                            <input type="text" class="form-control" @bind="_config.BuildOutputFolder"
                                   placeholder="C:\Users\YourName\Documents\EggscapeBuilds" />
                            <small class="form-text text-muted">üìÅ Directory where build outputs will be stored (e.g., APK, OBB files)</small>
                        </div>

                        <div class="mb-3">
                            <label class="form-label"><strong>Priority</strong></label>
                            <input type="number" class="form-control" @bind="_config.Priority" min="0" max="100" />
                            <small class="form-text text-muted">‚ö° Build order priority. Lower number = higher priority (0 is highest, 10 is default)</small>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseConfigModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveConfiguration">Save Configuration</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Agent> _agents = new();
    private List<AgentConfiguration> _agentConfigs = new();
    private bool _showConfigModal = false;
    private string? _selectedAgentId;
    private AgentConfigDto _config = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAgents();
    }

    private async Task LoadAgents()
    {
        _agents = await DB.Agents
            .OrderByDescending(a => a.LastHeartbeat)
            .ToListAsync();

        _agentConfigs = await DB.AgentConfigurations.ToListAsync();

        // Sort agents by priority (lower number = higher priority, show first)
        _agents = _agents
            .OrderBy(a =>
            {
                var config = _agentConfigs.FirstOrDefault(c => c.AgentId == a.AgentId);
                return config?.Priority ?? 999; // Unconfigured agents go to the end
            })
            .ThenByDescending(a => a.IsOnline)
            .ThenByDescending(a => a.IsAvailable)
            .ToList();
    }

    private async Task ShowConfigModal(string agentId)
    {
        _selectedAgentId = agentId;

        // Load existing config if available
        var existingConfig = await DB.AgentConfigurations
            .FirstOrDefaultAsync(c => c.AgentId == agentId);

        if (existingConfig != null)
        {
            _config = new AgentConfigDto
            {
                BuildOutputFolder = existingConfig.BuildOutputFolder,
                Priority = existingConfig.Priority
            };
        }
        else
        {
            _config = new AgentConfigDto { Priority = 10 }; // Default priority
        }

        _showConfigModal = true;
    }

    private void CloseConfigModal()
    {
        _showConfigModal = false;
        _selectedAgentId = null;
        _config = new AgentConfigDto();
    }

    private async Task SaveConfiguration()
    {
        if (string.IsNullOrEmpty(_selectedAgentId))
            return;

        var config = await DB.AgentConfigurations
            .FirstOrDefaultAsync(c => c.AgentId == _selectedAgentId);

        if (config == null)
        {
            config = new AgentConfiguration
            {
                AgentId = _selectedAgentId
            };
            DB.AgentConfigurations.Add(config);
        }

        config.BuildOutputFolder = _config.BuildOutputFolder ?? "";
        config.Priority = _config.Priority;
        config.UpdatedAt = DateTime.UtcNow;

        await DB.SaveChangesAsync();

        CloseConfigModal();
        await LoadAgents();
    }

    private string FormatDuration(int seconds)
    {
        if (seconds < 60)
            return $"{seconds}s";

        var minutes = seconds / 60;
        var secs = seconds % 60;

        if (minutes < 60)
            return $"{minutes}m {secs}s";

        var hours = minutes / 60;
        var mins = minutes % 60;
        return $"{hours}h {mins}m";
    }

    private class AgentConfigDto
    {
        public string? BuildOutputFolder { get; set; }
        public int Priority { get; set; } = 10;
    }
}
